{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/optional-chaining/","result":{"data":{"site":{"siteMetadata":{"title":"Jonas Gustavsson"}},"markdownRemark":{"id":"c66d9e8c-ec4b-5267-88b9-4aba9e9501f5","excerpt":"When you try to access a property of an undefined object you get the oh-so common  Because  doesnÂ´t exist we get an error. To avoid this we could throw in an ifâ€¦","html":"<p>When you try to access a property of an undefined object you get the oh-so common <code class=\"language-text\">Cannot read property x of undefined.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jedi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Luke\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lightsaberColor <span class=\"token operator\">=</span> jedi<span class=\"token punctuation\">.</span>lightsaber<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Cannot read property color of undefined.</span></code></pre></div>\n<p>Because <code class=\"language-text\">lightsaber</code> doesnÂ´t exist we get an error. To avoid this we could throw in an if statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jedi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Luke\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedi<span class=\"token punctuation\">.</span>lightsaber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lightsaberColor <span class=\"token operator\">=</span> jedi<span class=\"token punctuation\">.</span>lightsaber<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or perhaps more commonly seen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jedi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Luke\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lightsaberColor <span class=\"token operator\">=</span> jedi<span class=\"token punctuation\">.</span>lightsaber <span class=\"token operator\">&amp;&amp;</span> jedi<span class=\"token punctuation\">.</span>lightsaber<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></code></pre></div>\n<p>this wont throw an error because the left side of <code class=\"language-text\">&amp;&amp;</code> returns a falsy value (undefined) and therefore never continues to evaluate the right side.</p>\n<p>Both of these methods works perfectly fine and are widely used. However, <strong>with optional chaining</strong> we can get rid of some of the clutter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jedi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Luke\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lightSaberColor <span class=\"token operator\">=</span> jedi<span class=\"token punctuation\">.</span>lightsaber<span class=\"token operator\">?.</span>color<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note the <code class=\"language-text\">?.</code>. This results in no errors and cleaner code. Great!</p>\n<p>The benefit is even more obvious with deeper nestling. Lets safely look up the jediâ€™s masterâ€™s lightsaber color:</p>\n<p><strong>The traditional way:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> lightSaberColor <span class=\"token operator\">=</span>\n  jedi <span class=\"token operator\">&amp;&amp;</span> jedi<span class=\"token punctuation\">.</span>master <span class=\"token operator\">&amp;&amp;</span> jedi<span class=\"token punctuation\">.</span>master<span class=\"token punctuation\">.</span>lightsaber <span class=\"token operator\">&amp;&amp;</span> jedi<span class=\"token punctuation\">.</span>master<span class=\"token punctuation\">.</span>lightsaber<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>With optional chaining:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> lightSaberColor <span class=\"token operator\">=</span> jedi<span class=\"token operator\">?.</span>master<span class=\"token operator\">?.</span>lightsaber<span class=\"token operator\">?.</span>color<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Clean ðŸ‘Œ</p>","frontmatter":{"title":"Cleaner JavaScript with optional chaining","date":"August 18, 2020","description":"Allows us to access nested object properties without the clutter of explicit null checks."}}},"pageContext":{"slug":"/optional-chaining/","previous":{"fields":{"slug":"/console/"},"frontmatter":{"title":"Javascript - 6 useful console.log variants"}},"next":{"fields":{"slug":"/css-clamp-min-max/"},"frontmatter":{"title":"CSS responsive design with clamp min and max"}}}}}
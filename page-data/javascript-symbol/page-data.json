{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/javascript-symbol/","result":{"data":{"site":{"siteMetadata":{"title":"Web Like Spider"}},"markdownRemark":{"id":"ea8cbe78-b10d-5a30-98f6-d9e1293455d7","excerpt":"Simply put a symbol represents a completely unique identifier.\nSymbol is a new primitive data type, just like Number, String and Boolean. You create a symbol…","html":"<p>Simply put a symbol represents a completely unique identifier.\nSymbol is a <em>new</em> primitive data type, just like Number, String and Boolean.</p>\n<p>You create a symbol through the <code class=\"language-text\">Symbol()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> symbol1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> symbol2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbol1 <span class=\"token operator\">===</span> symbol2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>Since a symbol is always unique <code class=\"language-text\">Symbol() === Symbol()</code> is false.</p>\n<h2 id=\"why-is-this-useful\" style=\"position:relative;\">Why is this useful?</h2>\n<p>With symbols we can create “hidden” object properties that can not be overwritten or accessed from anywhere else.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create our unique symbol</span>\n<span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the string parameter is just a description</span>\n\nuser<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p>Because we have access to our id symbol here, only we can access the id property value. It cannot be reached by a third party, unless of course we somehow expose our symbol variable.</p>\n<p>This way another script can also add its own “id” symbol. There will be no conflict because symbols are always unique.</p>","frontmatter":{"title":"Javascript symbol - a short explanation","date":"July 05, 2020","description":"Symbol is a new data type used to create 'hidden' object properties. "}}},"pageContext":{"slug":"/javascript-symbol/","previous":{"fields":{"slug":"/css-position/"},"frontmatter":{"title":"CSS Position quick guide"}},"next":{"fields":{"slug":"/iterators-and-generators/"},"frontmatter":{"title":"Javascript understanding Generators and Iterators"}}}}}